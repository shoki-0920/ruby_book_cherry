=begin
 ここはコメントです。
 ここもコメントです。
 ここもコメントです。
=end

#これもコメントです。
# ctrl + /でコメントアウト

#/nで改行、'の場合は無視
数値には_を含めることができます。_は無視されるので、大きな数の区切り文字として使うと便利です。  1_000_000_000 #=> 1000000000

変数に整数が入っている場合は、to_fメソッドを呼ぶことで整数から小数に変更することができます。  n = 1
 n.to_f     #=> 1.0
 n.to_f / 2 #=> 0.5


 0.1 * 3.0 #=> 0.30000000000000004 

# Rationalクラスを使うと小数ではなく「10分の3」という計算結果が返る
 0.1r * 3.0r #=> (3/10)

 # Rationalクラスであれば期待したとおりに値の比較ができる
 0.1r * 3r == 0.3 #=> true

 0.1r * 3r <= 0.3 #=> true

%q!------------! #これでシングルクオートと囲んだことと同じになる

#ヒアドキュメント
a = <<TEXT
 これはヒアドキュメントです。
 複数行にわたる長い文字列を作成するのに便利です。
 TEXT
 puts a
 #=> これはヒアドキュメントです。
 #   複数行にわたる長い文字列を作成するのに便利です。

def some_method
   <<~TEXT
     これはヒアドキュメントです。
     <<~を使うと内部文字列のインデント部分が無視されます。
   TEXT
 end

 puts some_method
 #=> これはヒアドキュメントです。
 #   <<~を使うと内部文字列のインデント部分が無視されます。

02/06

# （empty?は文字列が空文字列だったときにtrueを返し、それ以外はfalseを返すメソッド）
 # こうではなく……
 if s.empty? == true
   '空文字列です'
 end

 # こう書く
 if s.empty?
   '空文字列です'
 end

user = nil
 # こうではなく……
 if user == nil
   'nilです'
 end

 # こう書く（unless userでも可）
 if !user
   'nilです'
 end

 # またはnil?メソッドを使う
 if user.nil?
   'nilです'
 end
1つのオブジェクトや式を複数の値と比較する場合は、
elsifを重ねるよりもcase文で書いたほうがシンプルになる！！！！

 case 対象のオブジェクトや式
 when 値1
   # 値1に一致する場合の処理
 when 値2
   # （値1に一致せず）値2に一致する場合の処理
 when 値3
   # （値1にも値2にも一致せず）値3に一致する場合の処理
 else
   # どれにも一致しない場合の処理
 end

 case country
 when 'japan'
   'こんにちは'
 when 'us'
   'Hello'
 when 'italy'
   'Ciao'
 else
   '???'
 end
 #=> "Ciao"

式 ? 真だった場合の処理 : 偽だった場合の処理

n = 11
 if n > 10
   '10より大きい'
 else
   '10以下'
 end
 #=> "10より大きい"

n = 11
 n > 10 ? '10より大きい' : '10以下'
 #=> "10より大きい"


 ？で終わるメソッドたち

# 空文字列であればtrue、そうでなければfalse
 ''.empty?     #=> true
 'abc'.empty?  #=> false

 # 引数の文字列が含まれていればtrue、そうでなければfalse

'watch'.include?('at') #=> true
 'watch'.include?('in') #=> false

 # 奇数ならtrue、偶数ならfalse
 1.odd?  #=> true
 2.odd?  #=> false

 # 偶数ならtrue、奇数ならfalse
 1.even? #=> false
 2.even? #=> true

 # オブジェクトがnilであればtrue、そうでなければfalse
 nil.nil?   #=> true
 'abc'.nil? #=> false
 1.nil?     #=> false

a = 'ruby'


！で終わるメソッドは、！がついてないやつより危険という意味を持つ
 # upcaseだと変数aの値は変化しない
 a.upcase  #=> "RUBY"
 a         #=> "ruby"

 # upcase!だと変数aの値も大文字に変わる
 a.upcase! #=> "RUBY"
 a         #=> "RUBY"

